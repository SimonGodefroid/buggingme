generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ENGINEER
  COMPANY
  GOD
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String       @id @default(cuid())
  name                    String?
  email                   String?      @unique
  emailVerified           DateTime?
  image                   String?
  validPublicReportsCount Int          @default(0)
  accounts                Account[]
  sessions                Session[]
  userTypes               UserType[]
  Report                  Report[]
  Comment                 Comment[]
  createdAt               DateTime     @default(now())
  updatedAt               DateTime?    @updatedAt
  companies               Company[]    @relation("UserCompanies")
  attachments             Attachment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  reports Report[] @relation("ReportTags")
}

enum ReportStatus {
  Open // default
  Closed // 
  Cancelled // closed by the contributor
  Deleted // private status soft deletion
}

enum ReportVisibility {
  Public
  Private
}

enum ReportCategory {
  // open
  New // default
  Valid // triaged
  PendingCompanyReview // not triaged by company but reviewed by admin team only company can move the status
  Testing // fix implemented and waiting for testing
  InformationNeeded // waiting for more information from the contributor
  // closed
  Resolved // fixed
  Informative // won't fix but is informative
  NotApplicable // not applicable
  Duplicate // duplicate
  Spam // garbage
}

enum Severity {
  Critical
  High
  Medium
  Low
}

enum Impact {
  SingleUser
  AllUsers
  SpecificBrowsersDevices
  SiteWide
}

model StatusHistory {
  id          String         @id @default(cuid())
  reportId    String
  oldStatus   ReportStatus
  newStatus   ReportStatus
  oldCategory ReportCategory
  newCategory ReportCategory
  changedAt   DateTime       @default(now())
  changedBy   String // You might want to relate this to a User or include userId
  report      Report         @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model UpdateHistory {
  id        String   @id @default(cuid())
  reportId  String
  fieldName String
  oldValue  String?
  newValue  String?
  updatedAt DateTime @default(now())
  updatedBy String // You might want to relate this to a User or include userId
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Report {
  id               String           @id @default(cuid())
  title            String
  companyId        String
  url              String?
  steps            String?
  currentBehavior  String?
  expectedBehavior String?
  suggestions      String?
  snippets         String?
  language         String?
  userId           String
  category         ReportCategory   @default(New)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments         Comment[]
  visibility       ReportVisibility @default(Public)
  status           ReportStatus     @default(Open)
  StatusHistory    StatusHistory[]
  UpdateHistory    UpdateHistory[]
  tags             Tag[]            @relation("ReportTags")
  severity         Severity         @default(Medium)
  impact           Impact           @default(SingleUser)
  company          Company?         @relation(fields: [companyId], references: [id])
  attachments      Attachment[] // Attachments related to the report
}

model Comment {
  id          String       @id @default(cuid())
  content     String
  reportId    String
  userId      String
  parentId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parent      Comment?     @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  report      Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  children    Comment[]    @relation("Comments")
  attachments Attachment[] // Attachments related to the report
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  domain    String?
  logo      String?
  reports   Report[]
  users     User[]   @relation("UserCompanies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        String    @id @default(cuid())
  url       String
  userId    String
  filename  String
  user      User      @relation(fields: [userId], references: [id])
  reportId  String? // Nullable, for report attachments
  commentId String? // Nullable, for comment attachments
  report    Report?   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  comment   Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
}
