generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserType {
  ENGINEER
  COMPANY
  GOD
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String           @id @default(cuid())
  name                    String?
  email                   String?          @unique
  emailVerified           DateTime?
  image                   String?
  validPublicReportsCount Int              @default(0)
  accounts                Account[]
  sessions                Session[]
  userTypes               UserType[]
  Report                  Report[]
  Comment                 Comment[]
  createdAt               DateTime         @default(now())
  updatedAt               DateTime?        @updatedAt
  companies               Company[]        @relation("UserCompanies")
  attachments             Attachment[]
  Campaign                Campaign[]
  invitationsReceived     Invitation[]     @relation("ReceivedInvitations") // Opposite field for invitee
  invitationsSent         Invitation[]     @relation("SentInvitations") // Opposite field for invitor
  Invitation              Invitation[]
  reputation              Int              @default(0)
  ReportDispatch          ReportDispatch[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  reports Report[] @relation("ReportTags")
}

enum ReportStatus {
  Open // default
  Closed // 
  Cancelled // closed by the contributor
  Deleted // private status soft deletion
}

enum ReportVisibility {
  Public
  Private
}

enum ReportCategory {
  // open
  New // default
  Valid // triaged
  PendingCompanyReview // not triaged by company but reviewed by admin team only company can move the status
  Testing // fix implemented and waiting for testing
  InformationNeeded // waiting for more information from the contributor
  // closed
  Resolved // fixed
  Informative // won't fix but is informative
  NotApplicable // not applicable
  Duplicate // duplicate
  Spam // garbage
}

enum Severity {
  Critical
  High
  Medium
  Low
}

enum Impact {
  SingleUser
  AllUsers
  SpecificBrowsersDevices
  SiteWide
}

model StatusHistory {
  id          String         @id @default(cuid())
  reportId    String
  oldStatus   ReportStatus
  newStatus   ReportStatus
  oldCategory ReportCategory
  newCategory ReportCategory
  changedAt   DateTime       @default(now())
  changedBy   String // You might want to relate this to a User or include userId
  report      Report         @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model UpdateHistory {
  id        String   @id @default(cuid())
  reportId  String
  fieldName String
  oldValue  String?
  newValue  String?
  updatedAt DateTime @default(now())
  updatedBy String // You might want to relate this to a User or include userId
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Report {
  id             String           @id @default(cuid())
  title          String
  companyId      String
  url            String?
  steps          String?
  suggestions    String?
  snippets       String?
  language       String?
  userId         String
  category       ReportCategory   @default(New)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments       Comment[]
  visibility     ReportVisibility @default(Public)
  status         ReportStatus     @default(Open)
  StatusHistory  StatusHistory[]
  UpdateHistory  UpdateHistory[]
  tags           Tag[]            @relation("ReportTags")
  severity       Severity         @default(Medium)
  impact         Impact           @default(SingleUser)
  company        Company?         @relation(fields: [companyId], references: [id])
  attachments    Attachment[] // Attachments related to the report
  campaignId     String? // Foreign key to link to a campaign
  campaign       Campaign?        @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  notifiedAt     DateTime?
  ReportDispatch ReportDispatch[]
}

model Comment {
  id          String       @id @default(cuid())
  content     String
  reportId    String
  userId      String
  parentId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parent      Comment?     @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  report      Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  children    Comment[]    @relation("Comments")
  attachments Attachment[] // Attachments related to the report
}

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  domain       String?
  logo         String?
  reports      Report[]
  users        User[]        @relation("UserCompanies")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Campaigns    Campaign[]    @relation("CompanyCampaigns")
  invitations  Invitation[] // Invitations associated with the company
  issueTracker IssueTracker?
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  userId    String
  filename  String
  user      User     @relation(fields: [userId], references: [id])
  reportId  String? // Nullable, for report attachments
  commentId String? // Nullable, for comment attachments
  report    Report?  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum CampaignType {
  Public
  InvitationOnly
}

enum CampaignStatus {
  Created
  Archived
}

model Campaign {
  id          String         @id @default(cuid())
  name        String         @unique
  description String
  startDate   DateTime
  endDate     DateTime
  rules       String
  type        CampaignType
  status      CampaignStatus @default(Created)
  companyId   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  User        User?          @relation(fields: [userId], references: [id])
  userId      String?
  company     Company        @relation("CompanyCampaigns", fields: [companyId], references: [id], onDelete: Cascade)
  invitations Invitation[] // Invitations related to this campaign
  Report      Report[]
}

enum InvitationStatus {
  Pending
  Accepted
  Cancelled
  Rejected
  Revoked
}

model Invitation {
  id         String           @id @default(cuid())
  status     InvitationStatus @default(Pending)
  inviteeId  String? // Linked after the user accepts the invitation
  invitee    User?            @relation("ReceivedInvitations", fields: [inviteeId], references: [id])
  invitorId  String // The user who sends the invitation
  invitor    User             @relation("SentInvitations", fields: [invitorId], references: [id])
  campaignId String
  campaign   Campaign         @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  companyId  String
  company    Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
  User       User?            @relation(fields: [userId], references: [id])
  userId     String?
  // FIXME: let's think this through
  // @@unique([campaignId, inviteeId]) // Added unique constraint
}

enum IssueTracker {
  GITHUB
  JIRA
  TRELLO
  ASANA
  LINEAR
  CLICKUP
  MONDAY
}

model ReportDispatch {
  id           String       @id @default(cuid())
  reportId     String
  issueTracker IssueTracker
  dispatchedBy String
  dispatchedAt DateTime     @default(now())
  externalId   String? // Issue ID in Trello
  status       String // Updated status from Trello (e.g., "Done", "In Progress")
  response     Json? // Last known response
  user         User         @relation(fields: [dispatchedBy], references: [id])
  report       Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)
  updatedAt    DateTime?    @updatedAt
}
