// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ENGINEER
  COMPANY
  GOD
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userTypes     UserType[]
  Report        Report[]
  Comment       Comment[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
  companies     Company[]  @relation("UserCompanies")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  reports Report[] @relation("ReportTags")
}

// Define the enum type
enum ReportStatus {
  Open
  UnderReview
  InProgress
  Resolved
  Closed
  Deferred
  Cancelled
  Rejected
  Deleted
}

enum ReportCategory {
  New
  Valid
  PendingCampaign
  Duplicate
  NotApplicable
  Informative
  Spam
  InformationNeeded
}

enum Severity {
  Critical
  High
  Medium
  Low
}

enum Impact {
  SingleUser
  AllUsers
  SpecificBrowsersDevices
  SiteWide
}

model StatusHistory {
  id        String       @id @default(cuid())
  reportId  String
  oldStatus ReportStatus
  newStatus ReportStatus
  changedAt DateTime     @default(now())
  changedBy String // You might want to relate this to a User or include userId
  report    Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model UpdateHistory {
  id        String   @id @default(cuid())
  reportId  String
  fieldName String
  oldValue  String?
  newValue  String?
  updatedAt DateTime @default(now())
  updatedBy String // You might want to relate this to a User or include userId
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

// Modify the Report model
model Report {
  id               String          @id @default(cuid())
  title            String
  companyId        String
  url              String?
  steps            String?
  currentBehavior  String?
  expectedBehavior String?
  suggestions      String?
  snippets         String?
  language         String?
  userId           String
  category         ReportCategory  @default(New)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments         Comment[]
  // New status field
  status           ReportStatus    @default(Open)
  StatusHistory    StatusHistory[]
  UpdateHistory    UpdateHistory[]
  tags             Tag[]           @relation("ReportTags")
  severity         Severity        @default(Medium)
  impact           Impact          @default(SingleUser)
  company          Company?        @relation(fields: [companyId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  reportId  String
  userId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  report    Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("Comments")
}

model Company {
  id      String   @id @default(cuid())
  name    String   @unique
  domain  String?
  logo    String?
  reports Report[]
  users   User[]   @relation("UserCompanies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
